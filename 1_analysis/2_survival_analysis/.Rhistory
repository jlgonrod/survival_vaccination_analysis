ajusted_curve <- ggadjustedcurves(fit,variable = 'vaccinated',
legend.title = "Vaccination Status",
main=title,
palette=custom_colors,
xlab='Days')
figure_number <- 9
# Save the plot as png
png(paste0("../OUTPUT_figures_tables/Figure_", figure_number, ".png"),
width = 2400,
height = 1600,
res = 200,
pointsize = 7)
print(ajusted_curve)
dev.off()
#Save the plot as tiff
tiff(paste0("../OUTPUT_figures_tables/Figure_", figure_number, ".tiff"),
width = 2400,
height = 1600,
res = 200,
pointsize = 7)
print(ajusted_curve)
dev.off()
# print the plot
print(ajusted_curve)
df <- read.csv("data/survival_data.csv")
# Remove columns no suitable for the analysis
df <- subset(df, select=-c(inpatient_days,
discharge_datetime,
death_datetime))
# cast admission_datetime from chr to Date
df$admission_datetime <- as.Date(df$admission_datetime, format = "%Y-%m-%d")
# Rename columns to be more interpretable
df <- df %>%
rename(Status = hospital_outcome,
Survival_in_days = followup_days)
# Rename sex levels
df$sex <- as.factor(df$sex)
df$sex <- recode(df$sex, "0" = "Female",
"1" = "Male")
# Remove wave columns
one_hot_columns <- grep("wave", colnames(df), value = TRUE)
df <- df[, -which(names(df) %in% one_hot_columns)]
rm(one_hot_columns)
################## GROUP 1: >= 80 YEARS, INIT 2020-12-27 ##################
age_boundary<- 80
date_boundary <- as.Date("2020-12-27") + 14 # 14 days after as it represents the start of protection after vaccination.
df_over80 <- df%>%
filter(age >= age_boundary,
admission_datetime >= date_boundary)
df_over80 <- df_over80[, -which(names(df_over80) == 'id')]
################## GROUP 2: >= 70 YEARS, INIT 2021-04-05 ##################
age_boundary<- 70
date_boundary <- as.Date("2021-04-05") + 14 # 14 days after
df_over70 <- df%>%
filter(age >= age_boundary,
admission_datetime >= date_boundary)
df_over70 <- df_over70[, -which(names(df_over70) == 'id')]
################## GROUP 3: >= 60 YEARS, INIT 2021-05-04 ##################
age_boundary<- 60
date_boundary <- as.Date("2021-05-03") + 14 # 14 days after
df_over60 <- df%>%
filter(age >= age_boundary,
admission_datetime >= date_boundary)
df_over60 <- df_over60[, -which(names(df_over60) == 'id')]
################## GROUP 4: >= 40 YEARS, INIT 2021-06-01 ##################
age_boundary<- 40
date_boundary <- as.Date("2021-06-01") + 14 # 14 days after
df_over40 <- df%>%
filter(age >= age_boundary,
admission_datetime >= date_boundary)
df_over40 <- df_over40[, -which(names(df_over40) == 'id')]
################## GROUP 5: >= 18 YEARS, INIT 2021-07-20 ##################
age_boundary<- 18
date_boundary <- as.Date("2021-07-20") + 14 # 14 days after
df_over18 <- df%>%
filter(age >= age_boundary,
admission_datetime >= date_boundary)
df_over18 <- df_over18[, -which(names(df_over18) == 'id')]
###########################################################################
rm(age_boundary, date_boundary)
cat("Check the subset:\n")
summary(df_over80[, c("age", "admission_datetime")])
cat("\nNumber rows:", nrow(df_over80))
generate_coxph_analysis(df_over80,
included_vars,
"Over 80 years (Group A)",
num_table = 8,
num_fig = 10)
df_over80<-as.data.frame(df_over80)
df_over80$vaccinated <-factor(
df_over80$vaccinated, levels = 0:1,
labels = c("Unvaccinated", "Vaccinated")
)
vars_descriptives <- included_vars[included_vars != "vaccinated"]
# Create the formula
string_formula <- paste("Surv(Survival_in_days, Status) ~ strata(vaccinated) + ",
paste(vars_descriptives, collapse = " + "))
formula <- as.formula(string_formula)
# Fit the Cox proportional hazards model with stratification by vaccinated status
fit <- coxph(formula, data = df_over80)
# Plot adjusted survival curves stratified by vaccinated status
custom_colors <- c("Unvaccinated" = "#f08080", "Vaccinated" = "#90ee90")
title = "Adjusted Survival Curves for Cox Proportional Hazards Model\nGroup A | ≥ 80 years"
ajusted_curve_A <- ggadjustedcurves(fit,variable = 'vaccinated',
legend.title = "Vaccination Status",
main=title,
palette=custom_colors,
xlab='Days')
figure_number <- 11
# Save the plot as png
png(paste0("../OUTPUT_figures_tables/Figure_", figure_number, ".png"),
width = 2400,
height = 1600,
res = 200,
pointsize = 7)
print(ajusted_curve_A)
dev.off()
#Save the plot as tiff
tiff(paste0("../OUTPUT_figures_tables/Figure_", figure_number, ".tiff"),
width = 2400,
height = 1600,
res = 200,
pointsize = 7)
print(ajusted_curve_A)
dev.off()
# print the plot
print(ajusted_curve_A)
cat("Check the subset:\n")
summary(df_over70[, c("age", "admission_datetime")])
cat("\nNumber rows:", nrow(df_over70))
generate_coxph_analysis(df_over70,
included_vars,
"Over 70 years (Group B)",
num_table = 9,
num_fig = 12)
df_over70<-as.data.frame(df_over70)
df_over70$vaccinated <-factor(
df_over70$vaccinated, levels = 0:1,
labels = c("Unvaccinated", "Vaccinated")
)
vars_descriptives <- included_vars[included_vars != "vaccinated"]
# Create the formula
string_formula <- paste("Surv(Survival_in_days, Status) ~ strata(vaccinated) + ",
paste(vars_descriptives, collapse = " + "))
formula <- as.formula(string_formula)
# Fit the Cox proportional hazards model with stratification by vaccinated status
fit <- coxph(formula, data = df_over70)
# Plot adjusted survival curves stratified by vaccinated status
custom_colors <- c("Unvaccinated" = "#f08080", "Vaccinated" = "#90ee90")
title = "Adjusted Survival Curves for Cox Proportional Hazards Model\nGroup B | ≥ 70 years"
ajusted_curve_B <- ggadjustedcurves(fit,variable = 'vaccinated',
legend.title = "Vaccination Status",
main=title,
palette=custom_colors,
xlab='Days')
figure_number <- 13
# Save the plot as png
png(paste0("../OUTPUT_figures_tables/Figure_", figure_number, ".png"),
width = 2400,
height = 1600,
res = 200,
pointsize = 7)
print(ajusted_curve_B)
dev.off()
#Save the plot as tiff
tiff(paste0("../OUTPUT_figures_tables/Figure_", figure_number, ".tiff"),
width = 2400,
height = 1600,
res = 200,
pointsize = 7)
print(ajusted_curve_B)
dev.off()
# print the plot
print(ajusted_curve_B)
cat("Check the subset:\n")
summary(df_over60[, c("age", "admission_datetime")])
cat("\nNumber rows:", nrow(df_over60))
generate_coxph_analysis(df_over60,
included_vars,
"Over 60 years (Group C)",
num_table = 10,
num_fig = 14)
df_over60<-as.data.frame(df_over60)
df_over60$vaccinated <-factor(
df_over60$vaccinated, levels = 0:1,
labels = c("Unvaccinated", "Vaccinated")
)
vars_descriptives <- included_vars[included_vars != "vaccinated"]
# Create the formula
string_formula <- paste("Surv(Survival_in_days, Status) ~ strata(vaccinated) + ",
paste(vars_descriptives, collapse = " + "))
formula <- as.formula(string_formula)
# Fit the Cox proportional hazards model with stratification by vaccinated status
fit <- coxph(formula, data = df_over60)
# Plot adjusted survival curves stratified by vaccinated status
custom_colors <- c("Unvaccinated" = "#f08080", "Vaccinated" = "#90ee90")
title = "Adjusted Survival Curves for Cox Proportional Hazards Model\nGroup C | ≥ 60 years"
ajusted_curve_C <- ggadjustedcurves(fit,variable = 'vaccinated',
legend.title = "Vaccination Status",
main=title,
palette=custom_colors,
xlab='Days')
figure_number <- 15
# Save the plot as png
png(paste0("../OUTPUT_figures_tables/Figure_", figure_number, ".png"),
width = 2400,
height = 1600,
res = 200,
pointsize = 7)
print(ajusted_curve_C)
dev.off()
#Save the plot as tiff
tiff(paste0("../OUTPUT_figures_tables/Figure_", figure_number, ".tiff"),
width = 2400,
height = 1600,
res = 200,
pointsize = 7)
print(ajusted_curve_C)
dev.off()
# print the plot
print(ajusted_curve_C)
cat("Check the subset:\n")
summary(df_over40[, c("age", "admission_datetime")])
cat("\nNumber rows:", nrow(df_over40))
generate_coxph_analysis(df_over40,
included_vars,
"Over 40 years (Group D)",
num_table = 11,
num_fig = 16)
df_over40<-as.data.frame(df_over40)
df_over40$vaccinated <-factor(
df_over40$vaccinated, levels = 0:1,
labels = c("Unvaccinated", "Vaccinated")
)
vars_descriptives <- included_vars[included_vars != "vaccinated"]
# Create the formula
string_formula <- paste("Surv(Survival_in_days, Status) ~ strata(vaccinated) + ",
paste(vars_descriptives, collapse = " + "))
formula <- as.formula(string_formula)
# Fit the Cox proportional hazards model with stratification by vaccinated status
fit <- coxph(formula, data = df_over40)
# Plot adjusted survival curves stratified by vaccinated status
custom_colors <- c("Unvaccinated" = "#f08080", "Vaccinated" = "#90ee90")
title = "Adjusted Survival Curves for Cox Proportional Hazards Model\nGroup D | ≥ 40 years"
ajusted_curve_D <- ggadjustedcurves(fit,variable = 'vaccinated',
legend.title = "Vaccination Status",
main=title,
palette=custom_colors,
xlab='Days')
figure_number <- 17
# Save the plot as png
png(paste0("../OUTPUT_figures_tables/Figure_", figure_number, ".png"),
width = 2400,
height = 1600,
res = 200,
pointsize = 7)
print(ajusted_curve_D)
dev.off()
#Save the plot as tiff
tiff(paste0("../OUTPUT_figures_tables/Figure_", figure_number, ".tiff"),
width = 2400,
height = 1600,
res = 200,
pointsize = 7)
print(ajusted_curve_D)
dev.off()
# print the plot
print(ajusted_curve_D)
cat("Check the subset:\n")
summary(df_over18[, c("age", "admission_datetime")])
cat("\nNumber rows:", nrow(df_over18))
generate_coxph_analysis(df_over18,
included_vars,
"Over 18 years (Group E)",
num_table = 12,
num_fig = 18)
df_over18<-as.data.frame(df_over18)
df_over18$vaccinated <-factor(
df_over18$vaccinated, levels = 0:1,
labels = c("Unvaccinated", "Vaccinated")
)
vars_descriptives <- included_vars[included_vars != "vaccinated"]
# Create the formula
string_formula <- paste("Surv(Survival_in_days, Status) ~ strata(vaccinated) + ",
paste(vars_descriptives, collapse = " + "))
formula <- as.formula(string_formula)
# Fit the Cox proportional hazards model with stratification by vaccinated status
fit <- coxph(formula, data = df_over18)
# Plot adjusted survival curves stratified by vaccinated status
custom_colors <- c("Unvaccinated" = "#f08080", "Vaccinated" = "#90ee90")
title = "Adjusted Survival Curves for Cox Proportional Hazards Model\nGroup E | ≥ 18 years"
ajusted_curve_E <- ggadjustedcurves(fit,variable = 'vaccinated',
legend.title = "Vaccination Status",
main=title,
palette=custom_colors,
xlab='Days')
figure_number <- 19
# Save the plot as png
png(paste0("../OUTPUT_figures_tables/Figure_", figure_number, ".png"),
width = 2400,
height = 1600,
res = 200,
pointsize = 7)
print(ajusted_curve_E)
dev.off()
#Save the plot as tiff
tiff(paste0("../OUTPUT_figures_tables/Figure_", figure_number, ".tiff"),
width = 2400,
height = 1600,
res = 200,
pointsize = 7)
print(ajusted_curve_E)
dev.off()
# print the plot
print(ajusted_curve_E)
list_subplots <- list(ajusted_curve_A, ajusted_curve_B, ajusted_curve_C, ajusted_curve_D, ajusted_curve_E)
plot_grid <- plot_grid(plotlist = list_subplots, nrow=3, ncol=2)
n_figure <- 20
# Save as png
png(paste("../OUTPUT_figures_tables/Figure_", n_figure, ".png", sep=""),
width = 35*120,
height = 37.5*120,
res = 200,
pointsize = 7)
print(plot_grid)
dev.off()
# Save as tiff
tiff(paste("../OUTPUT_figures_tables/Figure_", n_figure, ".tiff", sep=""),
width = 35*120,
height = 37.5*120,
res = 200,
pointsize = 7)
print(plot_grid)
dev.off()
# Plot
print(plot_grid)
vacc_df <- read.csv("../../0_get_data/data/04_Vacunacion_covid.txt", sep = '|')
vacc_df$FEC_VACUNACION <- as.Date(as.character(vacc_df$FEC_VACUNACION), format = "%Y%m%d")
# Remove previous vaccination info
df$vaccinated <- NA
# Merge both df
merged_df <- merge(df, vacc_df, by.x = "id", by.y = "NUHSA_ENCRIPTADO", all.x = TRUE)
# UNPROTECTED
id_unprotected <- merged_df[is.na(merged_df$FEC_VACUNACION), "id"]
df$vaccinated[df$id %in% id_unprotected] <- "Unprotected"
# All vaccines before admission are not count
merged_df <- merged_df %>%
filter(FEC_VACUNACION +14 < admission_datetime)
# PROTECTED
df_protected <- merged_df %>%
group_by(id) %>%
filter(n() >= 3) %>%
summarize(
last_dosis_date = max(FEC_VACUNACION, na.rm = TRUE),
admission_datetime = first(admission_datetime)  # All values are the same for admission_datetime
) %>%
ungroup() %>%
mutate(days_last_dosis = as.numeric(difftime(admission_datetime, last_dosis_date, units = "days")))
id_protected <- df_protected %>% filter(days_last_dosis <= 180) %>% pull(id)
df$vaccinated[df$id %in% id_protected] <- "Protected"
# INCOMPLETE
others_id <- subset(df, is.na(vaccinated))$id
df_incomplete <- merged_df %>%
filter(id %in% others_id) %>%
group_by(id) %>%
filter(n() > 0 & n() < 3) %>%
summarize(
last_dosis_date = max(FEC_VACUNACION, na.rm = TRUE),
admission_datetime = first(admission_datetime)  # All values are the same for admission_datetime
) %>%
ungroup %>%
mutate(days_last_dosis = as.numeric(difftime(admission_datetime, last_dosis_date, units = "days"))) %>%
filter(days_last_dosis > 180)
id_incomplete <-  df_incomplete %>% pull(id)
df$vaccinated[df$id %in% id_incomplete] <- "Incomplete"
# REMOVE OTHER CASES
df <- df[complete.cases(df$vaccinated), ]
# Set as factor
df$vaccinated <- as.factor(df$vaccinated)
df$vaccinated <- factor(df$vaccinated, levels = c("Unprotected", "Protected", "Incomplete"))
# Count each possible level
cat("Vaccination subgroups:")
print(table(df$vaccinated))
# Create the formula
formula_string <- paste("Surv(Survival_in_days, Status) ~", paste(included_vars, collapse = " + "))
formula <- as.formula(formula_string)
# Model
cox_model_3 <- coxph(formula, data = df)
# Extract the model report
cox_model_summary_3 <- summary(cox_model_3)
# Extract the relevant_data
coefficients <- as.data.frame(cox_model_summary_3$coefficients)
intervals <- as.data.frame(cox_model_summary_3$conf.int)
# Combine both df with relevant info
cox_model_report3 <- cbind(coefficients, intervals[, c("lower .95", "upper .95")])
remap_rows = remap_rows <- c(
"vaccinatedProtected" = "Vaccinated (Protected)",
"vaccinatedIncomplete" = "Vaccinated (Incomplete)",
"sexMale" = "Sex Male",
"age" = "Age",
"type_centerHospital de especialidades" = "Medical Center Type Specialty",
"type_centerHospital regional" = "Medical Center Type Regional",
"icu" = "ICU Stay",
"wavewave_3" = "Wave 3",
"wavewave_4" = "Wave 4",
"wavewave_5" = "Wave 5",
"wavewave_6" = "Wave 6",
"wavewave_7" = "Wave 7",
"pmhx_activecancer" = "Preexisting Condition Active Cancer",
"pmhx_asthma" = "Preexisting Condition Asthma",
"pmhx_chf" = "Preexisting Condition Congestive Heart Failure",
"pmhx_chronicliver" = "Preexisting Condition Chronic Liver",
"pmhx_ckd" = "Preexisting Condition Chronic Kidney Disease",
"pmhx_copd" = "Preexisting Condition COPD",
"pmhx_dementia" = "Preexisting Condition Dementia",
"pmhx_diabetes" = "Preexisting Condition Diabetes",
"pmhx_hld" = "Preexisting Condition Hyperlipidemia",
"pmhx_htn" = "Preexisting Condition Hypertension",
"pmhx_ihd" = "Preexisting Condition Ischemic Heart Disease",
"pmhx_obesity" = "Preexisting Condition Obesity",
"pmhx_stroke" = "Preexisting Condition Stroke",
"lab_alt" = "Alanine Transaminase",
"lab_ast" = "Aspartate Transaminase",
"lab_creatinine" = "Creatinine",
"lab_crp" = "C-Reactive Protein",
"lab_ddimer" = "D-Dimer",
"lab_glucose" = "Glucose",
"lab_hct" = "Hematocrit",
"lab_hemoglobin" = "Hemoglobin",
"lab_inr" = "Normalized Prothrombin Time - INR",
"lab_ldh" = "Lactate Dehydrogenase",
"lab_leukocyte" = "Leukocyte Count",
"lab_lymphocyte" = "Lymphocyte Count",
"lab_lymphocyte_percentage" = "Lymphocyte Percentage",
"lab_mch" = "Mean Corpuscular Hemoglobin",
"lab_mcv" = "Mean Corpuscular Volume",
"lab_neutrophil" = "Neutrophil Count",
"lab_neutrophil_percentage" = "Neutrophil Percentage",
"lab_platelet" = "Platelet Count",
"lab_potassium" = "Potassium",
"lab_rbc" = "Red Blood Cell Count",
"lab_sodium" = "Sodium",
"lab_urea" = "Urea"
)
rownames(cox_model_report3) <- remap_rows[rownames(cox_model_report3)]
num_table <- 13
# Save the report in excel
excel_path <- paste0("../OUTPUT_figures_tables/Table_", num_table, "_ModelReport_", "- Stratification Unprotected, Protected and Incomplete",".xlsx")
#
cox_model_report_excel <- cox_model_report3 %>%
mutate(variables = row.names(cox_model_report3)) %>%
select(variables, everything())
write_xlsx(cox_model_report_excel, excel_path)
# create the foresplot
plot_title <- "Forest Plot - Hazard ratio (with 95% Confidence Interval)\nRefined model | Immunization Stratification:\nUnprotected, Protected and Incomplete protection"
foresplot <- create_forest_plot(cox_model_report3, plot_title, 20)
print(foresplot)
df<-as.data.frame(df)
vars_descriptives <- included_vars[included_vars != "vaccinated"]
# Create the formula
string_formula <- paste("Surv(Survival_in_days, Status) ~ strata(vaccinated) + ",
paste(vars_descriptives, collapse = " + "))
formula <- as.formula(string_formula)
# Fit the Cox proportional hazards model with stratification by vaccinated status
fit <- coxph(formula, data = df)
# Plot adjusted survival curves stratified by vaccinated status
custom_colors <- c("Unprotected" = "#AB6BEA", "Protected" = "#54EB86", "Incomplete" = "#EBAF54")
title = "Adjusted Survival Curves for Cox Proportional Hazards Model\nImmunization Stratification:\nUnprotected, Protected and Incomplete protection"
ajusted_curve_D <- ggadjustedcurves(fit,variable = 'vaccinated',
legend.title = "Vaccination Status",
main=title,
palette=custom_colors,
xlab='Days')
figure_number <- 21
# Save the plot as png
png(paste0("../OUTPUT_figures_tables/Figure_", figure_number, ".png"),
width = 2400,
height = 1600,
res = 200,
pointsize = 7)
print(ajusted_curve_D)
dev.off()
#Save the plot as tiff
tiff(paste0("../OUTPUT_figures_tables/Figure_", figure_number, ".tiff"),
width = 2400,
height = 1600,
res = 200,
pointsize = 7)
print(ajusted_curve_D)
dev.off()
# print the plot
print(ajusted_curve_D)
save.image(".Rdata")
#The next code help to check the survival per vaccination status and time.
#```{r}
## ############## Day 1: Survival Analysis #################
#
## Analyze survival for non-vaccinated on Day 1
#analyze_survival(df, "Survival_in_days", "Status", 0, 0)
#
## Analyze survival for vaccinated on Day 1
#analyze_survival(df, "Survival_in_days", "Status", 1, 0)
#
## ############## Day 1: Survival Analysis #################
#
## Analyze survival for non-vaccinated on Day 50
#analyze_survival(df, "Survival_in_days", "Status", 0, 50)
#
#
## Analyze survival for vaccinated on last day
#analyze_survival(df, "Survival_in_days", "Status", 1, max(subset(df, vaccinated == 1)$Survival_in_days))
#```
